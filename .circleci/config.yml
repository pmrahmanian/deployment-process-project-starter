version: 2.1
orbs:
  # orgs contain basc recipes and reproducible actions (install node, aws, etc.)
  node: circleci/node@5.0.2
  eb: circleci/aws-elastic-beanstalk@2.0.1
  aws-cli: circleci/aws-cli@3.1.1
  nikkei-aws-eb: nikkei/nikkei-aws-eb@1.7.1
  # aws-eb-cli: speakable-org/aws-eb-cli@1.0.1
  # different jobs are calles later in the workflows sections
jobs:
  build:
    docker:
      # the base image can run most needed actions with orbs
      - image: "cimg/node:14.15"
    steps:
      # install node and checkout code
      - node/install:
          node-version: '14.15'         
      - checkout
      # Use root level package.json to install dependencies in the frontend app
      - run:
          name: Install Front-End Dependencies
          command: |
            echo "NODE --version" 
            echo $(node --version)
            echo "NPM --version" 
            echo $(npm --version)
            npm run frontend:install
      # TODO: Install dependencies in the the backend API          
      - run:
          name: Install API Dependencies
          command: |
            echo "Installing dependencies in the the backend API  "
            npm run api:install
      # TODO: Lint the frontend
      - run:
          name: Front-End Lint
          command: |
            echo "Linting the frontend"
            npm run frontend:lint
      # TODO: Build the frontend app
      - run:
          name: Front-End Build
          command: |
            echo "Build the frontend app"
            npm run frontend:build
      # TODO: Build the backend API      
      - run:
          name: API Build
          command: |
            echo "Build the backend API"
            npm run api:build
  # deploy step will run only after manual approval
  deploy:
    docker:
      - image: "cimg/base:stable"
      # more setup needed for aws, node, elastic beanstalk
    steps:
      - node/install:
          node-version: '14.15' 
      - eb/setup
      - aws-cli/setup
      - checkout
      - nikkei-aws-eb/init_eb:
          parameters:
            eb_app_name:
              type: string
              default: $EB_APP_NAME
            eb_env_name:
              type: string
              default: $EB_ENV_NAME
            eb_subdomain:
              type: string
              default: $EB_SUBDOMAIN
            eb_config_file:
              type: string
            ebi_arguments:
              type: string
              default: ''
            eb_config_diff:
              type: string
              default: ''
            billing_tag:
              type: string
            aws_access_key_id:
              type: string
              default: $AWS_ACCESS_KEY_ID
            aws_secret_access_key:
              type: string
              default: $AWS_SECRET_ACCESS_KEY
            region:
              type: string
              default: $AWS_REGION
          steps:
            - run:
                name: Init ElasticBeanstalk app
                command: >
                  # unset NIKKEI_AWSEB_INIT status

                  sed -e "/^export NIKKEI_AWSEB_INIT=/d" -i $BASH_ENV

                  # Check if eb init is done

                  EB_LIST=`eb list --region <<parameters.region>>|sed 's/^\* //g'`

                  echo -e "EB_LIST=\n${EB_LIST}"

                  if [[ `echo "$EB_LIST" | grep -E
                  "^<<parameters.eb_env_name>>($|-[r-z][0-9a-z]{5})"` ]]; then
                    echo "eb_env_name:<<parameters.eb_env_name>> already exists. skip init_eb"
                  else
                    CONFIG_FILENAME=`basename <<parameters.eb_config_file>>`
                    CONFIG_DIFFFILE=<<parameters.eb_config_diff>>
                    BILLING_TAG=<<parameters.billing_tag>>
                    aws s3 cp <<parameters.eb_config_file>> .elasticbeanstalk/
                    sed -i "s/billing: _ebdefault_/billing: $BILLING_TAG/g" .elasticbeanstalk/${CONFIG_FILENAME}
                    if [ -n "$CONFIG_DIFFFILE" -a ! -e .elasticbeanstalk/${CONFIG_DIFFFILE} ]; then
                      echo "CONFIG_DIFFFILE is set, but not exsist entity file."
                      exit 1
                    fi
                    if [ -n "$CONFIG_DIFFFILE" -a -e .elasticbeanstalk/${CONFIG_DIFFFILE} ]; then
                      cd .elasticbeanstalk/
                      yq ea '. as $item ireduce ({}; . * $item)' -i ${CONFIG_FILENAME} ${CONFIG_DIFFFILE}
                      cat ${CONFIG_FILENAME}
                      cd ../
                    fi
                    # Backward compatibility, prefer to use "ebi_arguments" but still can use "ebi_argments" if specified
                    EBI_ARGS=$([[ "<<parameters.ebi_arguments>>" != "" ]] && echo "<<parameters.ebi_arguments>>" || echo "<<parameters.ebi_argments>>")
                    eb init <<parameters.eb_app_name>> -p docker -r <<parameters.region>>
                    eb config put $CONFIG_FILENAME
                    ebi create \
                      <<parameters.eb_app_name>> \
                      <<parameters.eb_env_name>> \
                      <<parameters.eb_subdomain>> \
                      --region <<parameters.region>> \
                      --cfg=${CONFIG_FILENAME%%.*} \
                      $EBI_ARGS

                    # lifecycle
                    AWS_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
                    SERVICE_ROLE=arn:aws:iam::${AWS_ACCOUNT}:role/aws-elasticbeanstalk-service-role
                    aws elasticbeanstalk update-application-resource-lifecycle \
                      --application-name <<parameters.eb_app_name>> \
                      --resource-lifecycle-config "ServiceRole=${SERVICE_ROLE},VersionLifecycleConfig={MaxCountRule={Enabled=true,MaxCount=10,DeleteSourceFromS3=true}}"
                    # set NIKKEI_AWSEB_INIT as created
                    echo 'export NIKKEI_AWSEB_INIT=1' >> $BASH_ENV
                  fi


      - run:
          name: Deploy App
          # TODO: Install, build, deploy in both apps
          command: |
            echo " TODO: Install, build, deploy in both apps"
            eb create my-environment
            eb deploy my-environment
            eb status
            npm run setenv
            npm run deploy
            
workflows:
  udagram:
    jobs:
      - build
      - hold:
          filters:
            branches:
              only:
                - master
          type: approval
          requires:
            - build
      - deploy:
          requires:
            - hold
